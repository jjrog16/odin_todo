(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>c});var o=n(537),r=n.n(o),i=n(645),a=n.n(i)()(r());a.push([e.id,"body {\n  margin: 0;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  user-select: none;\n  box-sizing: border-box;\n}\n\n.content {\n  display: flex;\n  flex: 1;\n}\n\n/* Projects */\n\n.add-item {\n  color: white;\n  background-color: red;\n  height: 32x;\n  text-align: center;\n  padding: 8px;\n  font-size: 24px;\n  /* Prevents highlighting text when user double-clicks*/\n  user-select: none;\n}\n\n.add-item:hover {\n  background-color: white;\n  color: black;\n  cursor: pointer;\n}\n\n.project-item {\n  color: white;\n  padding: 8px;\n  font-size: 24px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.delete-project {\n  font-size: 16px;\n  padding: 8px;\n}\n\n.delete-project:hover {\n  background-color: white;\n  color: black;\n  cursor: pointer;\n}\n\n.sidebar {\n  width: 300px;\n  background: black;\n  flex-shrink: 0;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n\n\n.section-title {\n  font-size: 48px;\n}\n\n.sidebar .section-title {\n  color: white;\n  padding: 0px 8px 32px 8px;\n}\n\n\n/* Tasks */\n.main-container {\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  width: 800px;\n}\n\n.task-container {\n  display: flex;\n  flex-flow: column wrap;\n  justify-content: center;\n  align-items: center;\n}\n\n.main-bottom {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n}\n\n.task-contents {\n  border: 1px solid #eee;\n  box-shadow: 2px 4px 16px rgba(0,0,0,.06);\n  border-radius: 4px;\n  width: 400px;\n  display: flex;\n  padding: 32px;\n  margin: 32px;\n}\n\n.task-top {\n  display: flex;\n  justify-content: space-between;\n  padding: 16px;\n}\n\n.task-left {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 8px;\n}\n\n.task-bottom {\n  display: flex;\n  justify-content: center;\n  padding: 16px;\n}\n\n.task-holder {\n  width: 400px;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT,iBAAiB;EACjB,aAAa;EACb,sBAAsB;EACtB,iBAAiB;EACjB,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,OAAO;AACT;;AAEA,aAAa;;AAEb;EACE,YAAY;EACZ,qBAAqB;EACrB,WAAW;EACX,kBAAkB;EAClB,YAAY;EACZ,eAAe;EACf,sDAAsD;EACtD,iBAAiB;AACnB;;AAEA;EACE,uBAAuB;EACvB,YAAY;EACZ,eAAe;AACjB;;AAEA;EACE,YAAY;EACZ,YAAY;EACZ,eAAe;EACf,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;AACrB;;AAEA;EACE,eAAe;EACf,YAAY;AACd;;AAEA;EACE,uBAAuB;EACvB,YAAY;EACZ,eAAe;AACjB;;AAEA;EACE,YAAY;EACZ,iBAAiB;EACjB,cAAc;EACd,aAAa;EACb,aAAa;EACb,sBAAsB;EACtB,8BAA8B;AAChC;;;AAGA;EACE,eAAe;AACjB;;AAEA;EACE,YAAY;EACZ,yBAAyB;AAC3B;;;AAGA,UAAU;AACV;EACE,aAAa;EACb,aAAa;EACb,sBAAsB;EACtB,8BAA8B;EAC9B,YAAY;AACd;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;;AAErB;;AAEA;EACE,sBAAsB;EACtB,wCAAwC;EACxC,kBAAkB;EAClB,YAAY;EACZ,aAAa;EACb,aAAa;EACb,YAAY;AACd;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,aAAa;AACf;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,YAAY;AACd;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,aAAa;AACf;;AAEA;EACE,YAAY;AACd",sourcesContent:["body {\n  margin: 0;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  user-select: none;\n  box-sizing: border-box;\n}\n\n.content {\n  display: flex;\n  flex: 1;\n}\n\n/* Projects */\n\n.add-item {\n  color: white;\n  background-color: red;\n  height: 32x;\n  text-align: center;\n  padding: 8px;\n  font-size: 24px;\n  /* Prevents highlighting text when user double-clicks*/\n  user-select: none;\n}\n\n.add-item:hover {\n  background-color: white;\n  color: black;\n  cursor: pointer;\n}\n\n.project-item {\n  color: white;\n  padding: 8px;\n  font-size: 24px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.delete-project {\n  font-size: 16px;\n  padding: 8px;\n}\n\n.delete-project:hover {\n  background-color: white;\n  color: black;\n  cursor: pointer;\n}\n\n.sidebar {\n  width: 300px;\n  background: black;\n  flex-shrink: 0;\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n\n\n.section-title {\n  font-size: 48px;\n}\n\n.sidebar .section-title {\n  color: white;\n  padding: 0px 8px 32px 8px;\n}\n\n\n/* Tasks */\n.main-container {\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  width: 800px;\n}\n\n.task-container {\n  display: flex;\n  flex-flow: column wrap;\n  justify-content: center;\n  align-items: center;\n}\n\n.main-bottom {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n}\n\n.task-contents {\n  border: 1px solid #eee;\n  box-shadow: 2px 4px 16px rgba(0,0,0,.06);\n  border-radius: 4px;\n  width: 400px;\n  display: flex;\n  padding: 32px;\n  margin: 32px;\n}\n\n.task-top {\n  display: flex;\n  justify-content: space-between;\n  padding: 16px;\n}\n\n.task-left {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 8px;\n}\n\n.task-bottom {\n  display: flex;\n  justify-content: center;\n  padding: 16px;\n}\n\n.task-holder {\n  width: 400px;\n}"],sourceRoot:""}]);const c=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(o)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(a[s]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);o&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */"),a=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(a).concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var i={},a=[],c=0;c<e.length;c++){var s=e[c],l=o.base?s[0]+o.base:s[0],d=i[l]||0,A="".concat(l," ").concat(d);i[l]=d+1;var u=n(A),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)t[u].references++,t[u].updater(p);else{var f=r(p,o);o.byIndex=c,t.splice(c,0,{identifier:A,updater:f,references:1})}a.push(A)}return a}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var i=o(e=e||[],r=r||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var c=n(i[a]);t[c].references--}for(var s=o(e,r),l=0;l<i.length;l++){var d=n(i[l]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}i=s}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={id:o,exports:{}};return e[o](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=n(379),t=n.n(e),o=n(795),r=n.n(o),i=n(569),a=n.n(i),c=n(565),s=n.n(c),l=n(216),d=n.n(l),A=n(589),u=n.n(A),p=n(426),f={};f.styleTagTransform=u(),f.setAttributes=s(),f.insert=a().bind(null,"head"),f.domAPI=r(),f.insertStyleElement=d(),t()(p.Z,f),p.Z&&p.Z.locals&&p.Z.locals;const g=(()=>{const e=document.querySelector(".task-container");function t(e,t){return t.projectTasks.findIndex((t=>t.id==e))}return{createTaskView:function(n){console.log(`Task created -> ${JSON.stringify(n)}`),console.log(`Task id: ${n.id}`),document.createElement("div").setAttribute("class","task-item");let o=document.createElement("div");o.setAttribute("class","task-left");let r=document.createElement("input");r.setAttribute("type","checkbox"),r.setAttribute("class","radio-button");let i=document.createElement("div");i.setAttribute("class","task-contents"),i.setAttribute("id",`task${n.id}`);let a=document.createElement("div");a.setAttribute("class","task-holder");let c=document.createElement("div");c.setAttribute("class","task-top");let s=document.createElement("input");s.setAttribute("class","task-name"),s.setAttribute("value",n.taskName),s.addEventListener("change",(e=>{!function(e,n){let o=e.target.value,r=C.getCurrentProjectHighlighted();console.log(`myProjectId: ${r}`);let i=m.getProjectIdIndex(r);console.log(`locationOfProject: ${i}`);let a=t(n,m.getProject(r));console.log(`locationOfTask: ${a}`),m.upsert(i,a,o),console.log(`${m.getProject(r)}`)}(e,n.id)}));let l=document.createElement("div");l.setAttribute("class","task-bottom");let d=document.createElement("div");d.setAttribute("class","delete-task"),d.appendChild(document.createTextNode("Delete")),d.addEventListener("click",(()=>{var e,t;e=C.getCurrentProjectHighlighted(),t=n.id,m.deleteTaskInProject(e,t),document.getElementById(`task${t}`).remove()})),o.appendChild(r),c.appendChild(s),l.appendChild(d),a.appendChild(c),a.appendChild(l),i.appendChild(o),i.appendChild(a);let A=document.querySelector(".removable");A.appendChild(i),e.appendChild(A)},clearTaskScreen:function(){let e=document.querySelector(".removable");e&&e.remove()},initRemovableTaskContainer:function(){let t=document.createElement("div");t.setAttribute("class","removable"),e.appendChild(t)},getTaskIdIndex:t,saveTaskView:function(e){let t=C.getCurrentProjectHighlighted(),n=m.getProjectIdIndex(t);m.upsert(n,null,e)}}})();class h{static#e=0;taskCounter;constructor(){this.taskCounter=++h.#e,this.id=this.taskCounter,this.taskName="hi"}init(){g.createTaskView(this),g.saveTaskView(this)}}const m=(()=>{let e=[];function t(t){return e.findIndex((e=>e.id==t))}return{saveProject:function(t){e.push(t)},deleteProject:function(t){e.splice(t,1)},getProject:function(t){return e.find((e=>e.id==t))},getProjectArrayLength:function(){return e.length},getProjectIdIndex:t,upsert:function(t,n,o){null==n?e[t].projectTasks.push(o):e[t].projectTasks[n].taskName=o},deleteTaskInProject:function(n,o){let r=t(n),i=function(n){let o=t(C.getCurrentProjectHighlighted());return e[o].projectTasks.findIndex((e=>e.id==n))}(o);e[r].projectTasks.splice(i,1)}}})(),C=(()=>{const e=document.querySelector(".project-container");let t,n=0,o=!1;function r(){return n}function i(e){n=e}function a(){return o}function c(e){o=e}return{createProjectView:function(n){let o=document.createElement("div");o.setAttribute("class","project-item"),o.setAttribute("id",`project${n}`);let s=document.createTextNode(`Project ${n}`);o.addEventListener("click",(()=>{(function(e,n){if(0==r()&&(i(n),c(!1)),r!=n){let e=document.getElementById(`project${r()}`);null!=e&&(e.style.backgroundColor="black",e.style.color="white",t=e)}i(n),e.style.backgroundColor="white",e.style.color="black",c(!0),function(e){g.clearTaskScreen(),g.initRemovableTaskContainer();let t=m.getProject(e);if(console.log(`Loading Project Tasks. Here is your project -> ${JSON.stringify(t)}`),null!=t.projectTasks)for(let e=0;e<t.projectTasks.length;e++)g.createTaskView(t.projectTasks[e])}(n)})(o,n),console.log(`Project ${n} clicked`),console.log(`${JSON.stringify(m.getProject(n))}`)})),o.appendChild(s);let l=document.createElement("div");l.setAttribute("class","delete-project"),l.appendChild(document.createTextNode("x")),l.addEventListener("click",(()=>{var e;e=n,console.log(`Status before delete -> ${a()}`),m.deleteProject(e),document.getElementById(`project${e}`).remove(),c(!1),console.log(`Status after delete -> ${a()}`)})),o.appendChild(l),e.appendChild(o)},setCurrentProjectHighlighted:i,getCurrentProjectHighlighted:r,getIsHighlightedStatus:a,setIsHighlightedStatus:c}})();class E{static#e=m.getProjectArrayLength();projectCounter;constructor(){this.projectCounter=++E.#e,this.id=this.projectCounter,this.projectName=`Project ${this.projectCounter}`,this.projectTasks=[]}init(){C.createProjectView(this.id),console.log(`The project has an ID of ${this.id}`)}}!function(){let e=new E;e.init(),m.saveProject(e)}();const x=document.querySelector(".project-container");document.querySelector(".sidebar .add-item").addEventListener("click",(function(){console.log("New Project clicked");let e=new E;e.init(),m.saveProject(e)})),document.querySelector(".main-bottom .add-item").addEventListener("click",(function(){console.log("New Task clicked"),console.log(`You created a new task and the project is: ${C.getCurrentProjectHighlighted()}`),x.childNodes.length>0&C.getIsHighlightedStatus()&&(new h).init()})),g.initRemovableTaskContainer()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,